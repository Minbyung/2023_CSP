클라이언트가 스프링 부트 서버의 /chat 엔드포인트로 연결을 시도합니다.
연결이 성공하면 클라이언트는 /app/message 주소로 메시지를 보냅니다.
서버는 이 메시지를 받고, /topic/messages 주소를 구독하고 있는 모든 클라이언트에게 메시지를 브로드캐스트합니다.
클라이언트는 /topic/messages에서 메시지를 수신하여 채팅 애플리케이션의 UI에 표시합니다.



<!DOCTYPE html>
<html>
<head>
    <title>Chat Page</title>
    <script src="https://cdn.jsdelivr.net/npm/sockjs-client/dist/sockjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/stomp-websocket/lib/stomp.min.js"></script>
</head>
<body>
    <div id="chat"></div>
    <input type="text" id="messageInput" />
    <button onclick="sendMessage()">Send</button>

    <script>
        var stompClient = null;

        function connect() {
            var socket = new SockJS('/chat'); // 서버로 연결을 시도합니다.
            stompClient = Stomp.over(socket);
            stompClient.connect({}, function(frame) {
           		 // '/topic/messages' 채널을 구독합니다.
                stompClient.subscribe('/topic/messages', function(messageOutput) {
                    var message = JSON.parse(messageOutput.body);
                    document.querySelector('#chat').innerHTML += '<p>' + message.content + '</p>';
                });
            });
        }
        connect();

        function sendMessage() {
            var messageContent = document.querySelector('#messageInput').value;
            if(messageContent) {
                var chatMessage = {
                    content: messageContent,
                    // sender, timestamp 등의 필드를 추가할 수 있습니다.
                };
                stompClient.send("/app/chat", {}, JSON.stringify(chatMessage));
                document.querySelector('#messageInput').value = '';
            }
        }
    </script>
</body>
</html>