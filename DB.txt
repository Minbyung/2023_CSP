DROP DATABASE IF EXISTS SB_CS;
CREATE DATABASE SB_CS;
USE SB_CS;

CREATE TABLE article(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    updateDate DATETIME NOT NULL,
    memberId INT UNSIGNED NOT NULL,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    `status` VARCHAR(100) NOT NULL,
    projectId INT UNSIGNED NOT NULL,
    groupId INT UNSIGNED NOT NULL
);

-- ALTER TABLE article ADD COLUMN hitCount INT UNSIGNED NOT NULL DEFAULT 0;

CREATE TABLE `member`(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    updateDate DATETIME NOT NULL,
    loginId VARCHAR(50) NOT NULL,
    loginPw VARCHAR(100) NOT NULL,
    authLevel SMALLINT UNSIGNED NOT NULL DEFAULT 2 COMMENT '권한 레벨 (일반 = 2, 관리자 = 1)',
    `name` VARCHAR(20) NOT NULL,
    teamName VARCHAR(20) NOT NULL,
    cellphoneNum VARCHAR(20) NOT NULL,
    delStatus TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT '탈퇴 여부 (탈퇴 전 = 0, 탈퇴 후 = 1)',
    delDate DATETIME COMMENT '탈퇴 날짜'
);

CREATE TABLE board(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    updateDate DATETIME NOT NULL,
    `code` VARCHAR(20) NOT NULL COMMENT 'notice(공지사항), free(자유), ...',
    `name` VARCHAR(20) NOT NULL COMMENT '게시판 이름'
);

CREATE TABLE recommendPoint(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    memberId INT UNSIGNED NOT NULL,
    relTypeCode VARCHAR(20) NOT NULL COMMENT '관련 데이터 타입 코드',
    relId INT UNSIGNED NOT NULL COMMENT '관련 데이터 번호',
    `point` INT NOT NULL DEFAULT 0
);

CREATE TABLE reply(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    updateDate DATETIME NOT NULL,
    memberId INT UNSIGNED NOT NULL,
    relTypeCode VARCHAR(20) NOT NULL,
    relId INT UNSIGNED NOT NULL,
    `body` TEXT NOT NULL
);

CREATE TABLE project(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    project_name VARCHAR(100) NOT NULL,
    project_description TEXT NOT NULL
);


CREATE TABLE projectMember (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, 
    projectId INT UNSIGNED NOT NULL, 
    memberId INT UNSIGNED NOT NULL, 
    `role` VARCHAR(30) NOT NULL
);

CREATE TABLE favorite (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    projectId INT NOT NULL,    
    memberId INT NOT NULL
);

CREATE TABLE tag (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    projectId INT NOT NULL,
    articleId INT NOT NULL,
    memberId INT NOT NULL
);

CREATE TABLE `group` (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    projectId INT NOT NULL,
    group_name VARCHAR(50) NOT NULL
);

INSERT INTO `group`
SET projectId = 1,
group_name = '그룹 미지정';

INSERT INTO `group`
SET projectId = 1,
group_name = '그룹1';

INSERT INTO `group`
SET projectId = 1,
group_name = '그룹2';

INSERT INTO `group`
SET projectId = 1,
group_name = '그룹3';

INSERT INTO `group`
SET projectId = 1,
group_name = '그룹4';

INSERT INTO tag
SET projectId = 1,
articleId = 1,
memberId = 2;


					
		
					
-- DELETE FROM favorite
-- WHERE memberId = 1
-- AND projectId = 1
-- 
-- SELECT A.* , M.name AS writerName
-- FROM article AS A
-- INNER JOIN `member` AS M
-- ON A.memberId = M.id
-- WHERE A.projectId = 1
-- ORDER BY A.id DESC;
-- 
-- SELECT M.name 
-- FROM `member` AS M
-- INNER JOIN projectMember AS PM
-- ON PM.memberId = M.id
-- WHERE `name` LIKE '%%'
--  

SELECT * FROM tag;
SELECT * FROM project;
SELECT * FROM projectMember;
SELECT * FROM `member`;
SELECT * FROM favorite;
SELECT * FROM article;
SELECT * FROM `group`;
-- TRUNCATE TABLE project;
-- TRUNCATE TABLE projectMember;
-- TRUNCATE TABLE favorite;

SELECT * FROM `group`
WHERE projectId = 1;


INSERT INTO projectMember
SET projectId = 1,
memberId = 1,
`role` = '팀장';

INSERT INTO projectMember
SET projectId = 1,
memberId = 2,
`role` = '팀원';

INSERT INTO projectMember
SET projectId = 2,
memberId = 3,
`role` = '팀장';

INSERT INTO project
SET project_name = '[IT/개발] 기능 개발 프로젝트',
project_description = 'IT 개발팀의 기능 개발 과정을 공유하고 관리하는 프로젝트 공간입니다.';

INSERT INTO article
SET regDate = NOW(),
updateDate = NOW(),
memberId = 2,
title = '공지1',
content = '공지내용1',
`status` = '요청',
projectId = 1,
groupId = 1;

INSERT INTO article
SET regDate = NOW(),
updateDate = NOW(),
memberId = 2,
title = 'test1',
content = 'test2',
`status` = '요청',
projectId = 1,
groupId = 2;

INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'admin@admin.com',
loginPw = 'admin',
authLevel = 1,
`name` = '관리자',
cellphoneNum = '010-0000-0000',
teamName = '코리아IT';


INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'test1@test1.com',
loginPw = 'test1',
authLevel = 2,
`name` = '유저1',
cellphoneNum = '010-1111-2222',
teamName = '코리아IT';

INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'test2@test2.com',
loginPw = 'test2',
authLevel = 2,
`name` = '유저2',
cellphoneNum = '010-2222-3333',
teamName = '코리아IT';

INSERT INTO board
SET regDate = NOW(),
updateDate = NOW(),
`code` = 'notice',
`name` = '공지사항';

INSERT INTO board
SET regDate = NOW(),
updateDate = NOW(),
`code` = 'free',
`name` = '자유';

SELECT A.*, M.name AS writerName, GROUP_CONCAT(TA.name) AS taggedNames, G.group_name AS groupName
FROM article AS A
INNER JOIN `member` AS M ON A.memberId = M.id
LEFT JOIN tag AS T ON A.id = T.articleId
LEFT JOIN `member` AS TA ON T.memberId = TA.id
LEFT JOIN `group` AS G ON A.groupId = G.id
WHERE A.projectId = 1
GROUP BY A.id
ORDER BY A.id DESC;

SELECT `status`, COUNT(*) AS `count`
FROM article
WHERE projectId = 1
GROUP BY `status`;


SELECT * 
FROM project AS P
LEFT JOIN projectMember AS PM
ON P.id = PM.projectId
HAVING PM.memberId = 1;

SELECT * FROM article;
SELECT * FROM `member`;
SELECT * FROM board;
SELECT * FROM recommendPoint;
SELECT * FROM reply;
SELECT * FROM project;

SELECT LAST_INSERT_ID();

/*
insert into article
(
    regDate, updateDate, memberId, boardId, title, `body`
)
select now(), now(), FLOOR(RAND() * 2) + 1, FLOOR(RAND() * 2) + 1, concat('제목_', FLOOR(RAND() * 10000)), CONCAT('내용_', FLOOR(RAND() * 10000))
from article;
*/