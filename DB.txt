DROP DATABASE IF EXISTS SB_CS;
CREATE DATABASE SB_CS;
USE SB_CS;

CREATE TABLE article (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    updateDate DATETIME NOT NULL,
    memberId INT UNSIGNED NOT NULL,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    `status` VARCHAR(100) NOT NULL,
    projectId INT UNSIGNED NOT NULL,
    groupId INT UNSIGNED NOT NULL,
    startDate DATETIME NOT NULL,
    endDate DATETIME NOT NULL,
    hitCount INT UNSIGNED NOT NULL DEFAULT 0
);
-- ALTER TABLE article ADD COLUMN hitCount INT UNSIGNED NOT NULL DEFAULT 0;

CREATE TABLE `member`(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    updateDate DATETIME NOT NULL,
    loginId VARCHAR(50) NOT NULL,
    loginPw VARCHAR(100) NOT NULL,
    profilePhotoPath TEXT,
    authLevel SMALLINT UNSIGNED NOT NULL DEFAULT 2 COMMENT '권한 레벨 (일반 = 2, 관리자 = 1)',
    `name` VARCHAR(20) NOT NULL,
    nickName VARCHAR(50) NOT NULL,
    cellphoneNum VARCHAR(20),
    delStatus TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT '탈퇴 여부 (탈퇴 전 = 0, 탈퇴 후 = 1)',
    delDate DATETIME COMMENT '탈퇴 날짜'
);

CREATE TABLE board(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    updateDate DATETIME NOT NULL,
    `code` VARCHAR(20) NOT NULL COMMENT 'notice(공지사항), free(자유), ...',
    `name` VARCHAR(20) NOT NULL COMMENT '게시판 이름'
);

CREATE TABLE recommendPoint(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    memberId INT UNSIGNED NOT NULL,
    relTypeCode VARCHAR(20) NOT NULL COMMENT '관련 데이터 타입 코드',
    relId INT UNSIGNED NOT NULL COMMENT '관련 데이터 번호',
    `point` INT NOT NULL DEFAULT 0
);

CREATE TABLE reply(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    updateDate DATETIME NOT NULL,
    memberId INT UNSIGNED NOT NULL,
    relTypeCode VARCHAR(20) NOT NULL,
    relId INT UNSIGNED NOT NULL,
    `body` TEXT NOT NULL
);

CREATE TABLE project(
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    project_name VARCHAR(100) NOT NULL,
    project_description TEXT NOT NULL,
    teamId INT NOT NULL
);


CREATE TABLE projectMember (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, 
    projectId INT UNSIGNED NOT NULL, 
    memberId INT UNSIGNED NOT NULL 
);


CREATE TABLE favorite (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    projectId INT NOT NULL,    
    memberId INT NOT NULL
);

CREATE TABLE tag (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    projectId INT NOT NULL,
    articleId INT NOT NULL,
    memberId INT NOT NULL
);

CREATE TABLE `group` (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    projectId INT NOT NULL,
    group_name VARCHAR(50) NOT NULL
);

CREATE TABLE team (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    teamName TEXT NOT NULL
);

CREATE TABLE teamInvite (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    teamId INT NOT NULL,
    inviteCode TEXT NOT NULL
);

CREATE TABLE teamMember (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    memberId INT NOT NULL,
    teamId INT NOT NULL
);

CREATE TABLE chatMessage (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    content TEXT NOT NULL,    
    senderName TEXT NOT NULL,
    senderId TEXT NOT NULL,
    recipientId TEXT NOT NULL,
    chatRoomId TEXT NOT NULL
);

CREATE TABLE chatRoom (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    chatRoomId VARCHAR(100) NOT NULL,
    senderId INT NOT NULL,
    recipientId INT NOT NULL,
    `name` VARCHAR(100) NOT NULL
);

CREATE TABLE groupChatRoom (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    groupChatRoomProjectId INT NOT NULL,
    `name` VARCHAR(100) NOT NULL,
    senderId INT NOT NULL
);

CREATE TABLE groupChatRoomMembers (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    groupChatRoomProjectId INT NOT NULL,
    memberId INT NOT NULL
);

CREATE TABLE groupChatMessage (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    content TEXT NOT NULL,    
    senderName TEXT NOT NULL,
    senderId TEXT NOT NULL,
    groupChatRoomProjectId TEXT NOT NULL
);

CREATE TABLE `tb_file` (
   `id` BIGINT(20) NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT '파일 번호 (PK)',
   `article_id` INT UNSIGNED NOT NULL COMMENT '게시글 번호 (FK)',
   `project_id` INT UNSIGNED NOT NULL COMMENT '프로젝트 번호 (FK)',
   `original_name` VARCHAR(255) NOT NULL COMMENT '원본 파일명',
   `save_name` VARCHAR(40) NOT NULL COMMENT '저장 파일명',
   `size` INT(11) NOT NULL COMMENT '파일 크기',
   `delete_yn` TINYINT(1) NOT NULL COMMENT '삭제 여부',
   `created_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT '생성일시',
   `deleted_date` DATETIME DEFAULT NULL COMMENT '삭제일시'
);

CREATE TABLE notification (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    regDate DATETIME NOT NULL,
    writerId INT UNSIGNED NOT NULL,
    writerName VARCHAR(100) NOT NULL,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    projectName VARCHAR(100) NOT NULL,
    articleId INT UNSIGNED NOT NULL,
    taggedMemberId INT UNSIGNED
);

CREATE TABLE zoomMeeting (
    id BIGINT UNSIGNED NOT NULL PRIMARY KEY,
    `uuid` TEXT NOT NULL,
    projectId INT UNSIGNED NOT NULL,
    memberId INT UNSIGNED NOT NULL,
    topic TEXT NOT NULL COMMENT '회의 이름',
    start_time TIMESTAMP NOT NULL COMMENT '회의 시작시간',
    duration INT UNSIGNED NOT NULL COMMENT '회의의 예상 지속 시간(분 단위)',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT '회의 생성시간',
    start_url TEXT NOT NULL COMMENT '호스트가 회의를 시작하기 위해 접속할 URL',
    join_url TEXT NOT NULL COMMENT '참가자가 회의에 참여하기 위해 사용하는 URL',
    `password` TEXT NOT NULL
);


INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'admin@admin.com',
loginPw = 'admin!23',
profilePhotoPath = 'default-profile.jpg',
authLevel = 1,
`name` = '관리자',
nickname = '관리자닉',
cellphoneNum = '010-0000-0000';

INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'test1@test1.com',
loginPw = 'admin!23',
profilePhotoPath = 'default-profile.jpg',
authLevel = 2,
`name` = '민병민',
nickname = 'test1',
cellphoneNum = '010-1111-1111';

INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'test2@test2.com',
loginPw = 'admin!23',
profilePhotoPath = 'default-profile.jpg',
authLevel = 2,
`name` = 'test2',
nickname = 'test2',
cellphoneNum = '010-2222-2222';

INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'test3@test3.com',
loginPw = 'admin!23',
profilePhotoPath = 'default-profile.jpg',
authLevel = 2,
`name` = 'test3',
nickname = 'test3',
cellphoneNum = '010-3333-3333';

INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'test4@test4.com',
loginPw = 'admin!23',
profilePhotoPath = 'default-profile.jpg',
authLevel = 2,
`name` = 'test4',
nickname = 'test4',
cellphoneNum = '010-4444-4444';

INSERT INTO team
SET teamName = "코리아IT";

INSERT INTO team
SET teamName = "테스트1팀";

INSERT INTO teamMember
SET memberId = 1,
teamId = 1;

INSERT INTO teamMember
SET memberId = 2,
teamId = 1;

INSERT INTO teamMember
SET memberId = 5,
teamId = 1;

INSERT INTO teamMember
SET memberId = 3,
teamId = 2;

INSERT INTO teamMember
SET memberId = 4,
teamId = 2;

INSERT INTO project
SET project_name = '[IT/개발] 기능 개발 프로젝트',
project_description = 'IT 개발팀의 기능 개발 과정을 공유하고 관리하는 프로젝트 공간입니다.',
teamId = 1;

INSERT INTO `group`
SET projectId = 1,
group_name = '그룹 미지정';

INSERT INTO project
SET project_name = '테스트',
project_description = '테스트',
teamId = 1;

INSERT INTO `group`
SET projectId = 2,
group_name = '그룹 미지정';

INSERT INTO project
SET project_name = '테스트1팀 - 1',
project_description = '테스트1팀 - 1',
teamId = 2;

INSERT INTO `group`
SET projectId = 3,
group_name = '그룹 미지정';

INSERT INTO project
SET project_name = '테스트1팀 - 2',
project_description = '테스트1팀 - 2',
teamId = 2;

INSERT INTO `group`
SET projectId = 4,
group_name = '그룹 미지정';

INSERT INTO projectMember
SET projectId = 1,
memberId = 1;

INSERT INTO projectMember
SET projectId = 2,
memberId = 2;

INSERT INTO projectMember
SET projectId = 3,
memberId = 3;

INSERT INTO projectMember
SET projectId = 4,
memberId = 4;

INSERT INTO article
SET regDate = NOW(),
updateDate = NOW(),
memberId = 1,
title = '공지1',
content = '공지내용1',
`status` = '요청',
projectId = 1,
groupId = 1,
startDate = NOW(),
endDate = '2024-05-31 14:50:11';

INSERT INTO article
SET regDate = NOW(),
updateDate = NOW(),
memberId = 2,
title = '테스트1',
content = '테스트내용1',
`status` = '피드백',
projectId = 1,
groupId = 1,
startDate = NOW(),
endDate = '2024-04-12 14:50:11';


INSERT INTO article
SET regDate = NOW(),
updateDate = NOW(),
memberId = 3,
title = '공지2',
content = '공지2',
`status` = '요청',
projectId = 3,
groupId = 1,
startDate = NOW(),
endDate = '2024-05-12 14:50:11';

INSERT INTO tag
SET projectId = 1,
articleId = 1,
memberId = 1;

INSERT INTO tag
SET projectId = 1,
articleId = 1,
memberId = 2;

INSERT INTO tag
SET projectId = 1,
articleId = 2,
memberId = 2;

INSERT INTO tag
SET projectId = 3,
articleId = 3,
memberId = 3;

INSERT INTO tag
SET projectId = 3,
articleId = 3,
memberId = 4;

select id from `member`
where `name` = '민병민';
SELECT * FROM article

SELECT * FROM reply

SELECT A.*, M.name AS writerName, GROUP_CONCAT(TA.name) AS taggedNames, G.group_name AS groupName, IFNULL(SUM(R.point), 0) AS `point`, P.project_name AS projectName
				FROM article AS A
				INNER JOIN `member` AS M ON A.memberId = M.id
				LEFT JOIN tag AS T ON A.id = T.articleId
				LEFT JOIN `member` AS TA ON T.memberId = TA.id
				LEFT JOIN `group` AS G ON A.groupId = G.id
				LEFT JOIN recommendPoint AS R ON relTypeCode = 'article' AND A.id = R.relId
				LEFT JOIN project AS P ON A.projectId = P.id
				WHERE A.id = 2
				GROUP BY A.id

SELECT * FROM project


SELECT M.*, PM.projectId AS projectId, P.project_name AS project_name
	        FROM `member` AS M
	        INNER JOIN projectMember AS PM ON M.id = PM.memberId
	        INNER JOIN project AS P ON PM.projectId = P.id
	        WHERE PM.projectId = 1
	        ORDER BY
	            CASE WHEN M.id = 1 THEN 0 ELSE 1 END, -- 현재 사용자 우선 정렬
	            M.id ASC -- 그 외 멤버는 ID 순으로 정렬


SELECT profilePhotoPath 
				FROM `member`
				WHERE id = 1

SELECT * FROM `member`

SELECT * FROM `projectMember`
SELECT * FROM notification
WHERE writerId != 1;
SELECT M.*, TM.teamId AS teamId
				FROM `member` AS M
				INNER JOIN teamMember AS TM
				ON M.id = TM.memberId
				WHERE M.id = 1

SELECT M.*, TM.teamId AS teamId
				FROM `member` AS M
				INNER JOIN teamMember AS TM
				ON M.id = TM.memberId
				WHERE M.id = 1


SELECT A.*, M.name AS writerName, GROUP_CONCAT(TA.name) AS taggedNames, G.group_name AS groupName, P.project_name AS projectName
				FROM article AS A
				INNER JOIN `member` AS M ON A.memberId = M.id
				LEFT JOIN tag AS T ON A.id = T.articleId
				LEFT JOIN `member` AS TA ON T.memberId = TA.id
				LEFT JOIN `group` AS G ON A.groupId = G.id
				LEFT JOIN project AS P ON A.projectId = P.id
				WHERE A.projectId = 1
				GROUP BY A.id
				ORDER BY A.id DESC
				LIMIT 1;

DROP TABLE chatRoom
DROP TABLE article
DROP TABLE tag
DELETE  FROM article
SELECT * FROM tb_file
SELECT * FROM article
SELECT * FROM tag


SELECT * FROM favorite
SELECT * FROM chatRoom
WHERE senderId = 1
SELECT * FROM `member`

SELECT * FROM `member`
SELECT * FROM teamMember
SELECT * FROM team

SELECT * FROM project;
SELECT * FROM favorite;

SELECT p.*, COUNT(pm.memberId) AS participantsCount
				FROM project p
				LEFT JOIN favorite f ON p.id = f.projectId AND f.memberId = 1
				LEFT JOIN projectMember pm ON p.id = pm.projectId
				WHERE f.memberId IS NULL AND p.teamId = 1
				GROUP BY p.id
				ORDER BY p.id DESC;


SELECT *
FROM project p
LEFT JOIN favorite f ON p.id = f.projectId AND f.memberId = #{memberId}
WHERE f.memberId IS NULL AND p.teamId = #{teamId};

SELECT p.*, COUNT(pm.memberId) AS participantsCount
FROM project AS p
INNER JOIN favorite AS f ON p.id = f.projectId
LEFT JOIN projectMember AS pm ON p.id = pm.projectId
WHERE f.memberId = 1 AND p.teamId = 1
GROUP BY p.id
ORDER BY f.id DESC;

SELECT *
FROM project AS p
INNER JOIN favorite AS f
ON p.id = f.projectId
WHERE f.memberId = 1 AND p.teamId = 1
ORDER BY p.id DESC;

SELECT M.*, TM.teamId AS teamId
FROM `member` AS M
LEFT JOIN teamMember AS TM
ON M.id = TM.memberId
WHERE M.loginId = 'test!@test!.com'


SELECT *
FROM `member`
WHERE loginId ='mbmcybery@naver.com';

SELECT * FROM `member`



SELECT * 
				FROM tb_file
				WHERE delete_yn = 0
				AND article_id = 1
				ORDER BY id

SELECT COUNT(*)
FROM groupChatRoomMembers
WHERE groupChatRoomProjectId = 1

SELECT * 
				FROM tb_file
				WHERE delete_yn = 0
				AND id = 1

INSERT INTO groupChatMessage
SET regDate = NOW(),
content = '1',
senderName = '관리자',
senderId = '1',
groupChatRoomProjectId = 1

INSERT INTO tag
SET projectId = 1,
articleId = 1,
memberId = 2;

INSERT INTO tag
SET projectId = 1,
articleId = 2,
memberId = 1;
					
SELECT M.*, TM.teamId AS teamId
FROM `member` AS M
INNER JOIN teamMember AS TM
ON M.id = TM.memberId
WHERE loginId = 'alszk1234@naver.com';	
				
-- DELETE FROM favorite
-- WHERE memberId = 1
-- AND projectId = 1
-- 
-- SELECT A.* , M.name AS writerName
-- FROM article AS A
-- INNER JOIN `member` AS M
-- ON A.memberId = M.id
-- WHERE A.projectId = 1
-- ORDER BY A.id DESC;
-- 
-- SELECT M.name 
-- FROM `member` AS M
-- INNER JOIN projectMember AS PM
-- ON PM.memberId = M.id
-- WHERE `name` LIKE '%%'
--  

SELECT * FROM chatRoom
SELECT * FROM groupChatRoom

SELECT A.*
FROM tag AS T
INNER JOIN article AS A
ON T.articleId = A.id
WHERE T.memberId = 1
ORDER BY regDate DESC

SELECT * FROM team;
SELECT * FROM teamInvite;
SELECT * FROM teamMember;
SELECT * FROM tag;
SELECT * FROM project;
SELECT * FROM projectMember;
SELECT * FROM `member`;
SELECT * FROM favorite;
SELECT * FROM article;
SELECT * FROM `group`;

-- TRUNCATE TABLE projectMember;

-- TRUNCATE TABLE favorite;


SELECT M.*, PM.projectId AS projectId
FROM `member` AS M
INNER JOIN  projectMember AS PM
ON M.id = PM.memberId
WHERE projectId = 1
ORDER BY id ASC;

INSERT INTO team
SET teamName = '코리아IT';

INSERT INTO teamMember
SET memberId = 1,
teamId = 1;

SELECT * FROM `group`
WHERE projectId = 1
ORDER BY id DESC;

INSERT INTO projectMember
SET projectId = 1,
memberId = 1;


INSERT INTO project
SET project_name = '[IT/개발] 기능 개발 프로젝트',
project_description = 'IT 개발팀의 기능 개발 과정을 공유하고 관리하는 프로젝트 공간입니다.',
teamId = 1;


INSERT INTO article
SET regDate = NOW(),
updateDate = NOW(),
memberId = 2,
title = '공지1',
content = '공지내용1',
`status` = '요청',
projectId = 1,
groupId = 1,
startDate = NOW(),
endDate = '2023-12-31';

INSERT INTO article
SET regDate = NOW(),
updateDate = NOW(),
memberId = 2,
title = 'test1',
content = 'test2',
`status` = '요청',
projectId = 1,
groupId = 1,
startDate = NOW(),
endDate = '2024-01-01';

INSERT INTO `member`
SET regDate = NOW(),
updateDate = NOW(),
loginId = 'admin@admin.com',
loginPw = 'admin',
authLevel = 1,
`name` = '관리자',
cellphoneNum = '010-0000-0000';


INSERT INTO board
SET regDate = NOW(),
updateDate = NOW(),
`code` = 'notice',
`name` = '공지사항';

INSERT INTO board
SET regDate = NOW(),
updateDate = NOW(),
`code` = 'free',
`name` = '자유';

SELECT A.*, M.name AS writerName, GROUP_CONCAT(TA.name) AS taggedNames, G.group_name AS groupName
FROM article AS A
INNER JOIN `member` AS M ON A.memberId = M.id
LEFT JOIN tag AS T ON A.id = T.articleId
LEFT JOIN `member` AS TA ON T.memberId = TA.id
LEFT JOIN `group` AS G ON A.groupId = G.id
WHERE A.projectId = 1
GROUP BY A.id
ORDER BY title ASC;

SELECT `status`, COUNT(*) AS `count`
FROM article
WHERE projectId = 1
GROUP BY `status`;


SELECT t.*, TI.teamId AS teamId, TI.inviteCode AS inviteCode
FROM team AS T
INNER JOIN teamInvite AS TI
ON T.id = TI.teamId
WHERE inviteCode = '55c8b54bae';

SELECT * 
FROM project AS P
LEFT JOIN projectMember AS PM
ON P.id = PM.projectId
HAVING PM.memberId = 1;

SELECT * FROM article;
SELECT * FROM `member`;
SELECT * FROM board;
SELECT * FROM recommendPoint;
SELECT * FROM reply;
SELECT * FROM project;
SELECT * FROM `group`;
SELECT * FROM teamMember;
SELECT * FROM projectMember;


SELECT A.*, G.group_name AS group_name FROM article AS A 
JOIN `group` AS G ON A.groupId = G.id 
ORDER BY G.group_name;


SELECT LAST_INSERT_ID();


SELECT A.*, M.name AS writerName, GROUP_CONCAT(TA.name) AS taggedNames, G.group_name AS groupName
FROM article AS A
INNER JOIN `member` AS M ON A.memberId = M.id
LEFT JOIN tag AS T ON A.id = T.articleId
LEFT JOIN `member` AS TA ON T.memberId = TA.id
LEFT JOIN `group` AS G ON A.groupId = G.id
WHERE A.projectId = 1
GROUP BY A.id
ORDER BY A.id DESC;


SELECT *
FROM project AS P
INNER JOIN projectMember PM ON P.id = PM.projectId
WHERE PM.memberId = 2 AND P.teamId = 1


SELECT P.*, COUNT(subPM.memberId) AS participantsCount
FROM project AS P
JOIN (
    SELECT projectId
    FROM projectMember
    WHERE memberId = 1
) AS subP ON P.id = subP.projectId
LEFT JOIN projectMember AS subPM ON P.id = subPM.projectId
WHERE P.teamId = 1
GROUP BY P.id;
/*
insert into article
(
    regDate, updateDate, memberId, boardId, title, `body`
)
select now(), now(), FLOOR(RAND() * 2) + 1, FLOOR(RAND() * 2) + 1, concat('제목_', FLOOR(RAND() * 10000)), CONCAT('내용_', FLOOR(RAND() * 10000))
from article;
*/